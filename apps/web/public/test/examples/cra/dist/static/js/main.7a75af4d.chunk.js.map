{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["waitForTime","ms","Promise","resolve","setTimeout","List","list","style","width","map","data","Item","text","key","App","React","useState","setList","useEffect","a","console","log","error","Error","dump","update","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAGA,SAASA,EAAYC,GACnB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAkCpD,SAASI,EAAT,GAAyB,IAATC,EAAQ,EAARA,KACd,OACE,oBAAIC,MAAO,CAAEC,MAAO,SAApB,SACGF,EAAKG,KAAI,SAAAC,GAAI,OACZ,cAACC,EAAD,CAAqBC,KAAMF,EAAKE,MAArBF,EAAKG,UAMxB,SAASF,EAAT,GAAyB,IAATC,EAAQ,EAARA,KACd,OAAO,6BAAKA,IAGCE,MA7Cf,WAAgB,IAAD,EACWC,IAAMC,SAAS,IAD1B,mBACNV,EADM,KACAW,EADA,KA4Bb,OAzBAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,6DACEF,EAAQ,CAAC,CAAEJ,IAAK,IAAKD,KAAM,SAD7B,SAEQZ,EAAY,KAFpB,cAGEoB,QAAQC,IAAI,gBAEZJ,EAAQ,CACN,CAAEJ,IAAK,IAAKD,KAAM,OAClB,CAAEC,IAAK,IAAKD,KAAM,SAPtB,SASQZ,EAAY,KATpB,cAUEoB,QAAQC,IAAI,kBAEZJ,EAAQ,CAAC,CAAEJ,IAAK,IAAKD,KAAM,SAZ7B,UAaQZ,EAAY,KAbpB,QAcEoB,QAAQC,IAAI,oBAEZD,QAAQE,MAAM,IAAIC,MAAM,QAGxBC,KAAK,+CAnBP,6CADc,uBAAC,WAAD,wBAsBdC,KACC,IAEI,cAACpB,EAAD,CAAMC,KAAMA,KCvBNoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7a75af4d.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\n// this example contains some delays for now to work around RecordReplay/gecko-dev#349\nfunction waitForTime(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction App() {\n  const [list, setList] = React.useState([]);\n\n  useEffect(() => {\n    async function update() {\n      setList([{ key: \"1\", text: \"Foo\" }]);\n      await waitForTime(2000);\n      console.log(\"Initial list\");\n\n      setList([\n        { key: \"1\", text: \"Foo\" },\n        { key: \"2\", text: \"Bar\" },\n      ]);\n      await waitForTime(100);\n      console.log(\"Added an entry\");\n\n      setList([{ key: \"2\", text: \"Bar\" }]);\n      await waitForTime(100);\n      console.log(\"Removed an entry\");\n\n      console.error(new Error(\"Baz\"));\n\n      // eslint-disable-next-line no-undef\n      console.log("ExampleFinished");\n    }\n    update();\n  }, []);\n\n  return <List list={list} />;\n}\n\nfunction List({ list }) {\n  return (\n    <ul style={{ width: \"100px\" }}>\n      {list.map(data => (\n        <Item key={data.key} text={data.text} />\n      ))}\n    </ul>\n  );\n}\n\nfunction Item({ text }) {\n  return <li>{text}</li>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}